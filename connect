./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	return( defined($monitor->{ShmKey})?$monitor->{ShmKey}:undef );
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	if ( !defined($monitor->{ShmId}) )
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:		my $shm_key = (hex($Config{ZM_SHM_KEY})&0xffff0000)|$monitor->{Id};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:    		Error( sprintf( "Can't get shared memory id '%x', %d: $!\n", $shm_key, $monitor->{Id} ) );
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:		$monitor->{ShmKey} = $shm_key;
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:		$monitor->{ShmId} = $shm_id;
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	delete $monitor->{ShmId};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	my $shm_key = $monitor->{ShmKey};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	my $shm_id = $monitor->{ShmId};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	my $shm_key = $monitor->{ShmKey};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Shared.pm:	my $shm_id = $monitor->{ShmId};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:    return( defined($monitor->{MMapAddr})?$monitor->{MMapAddr}:undef );
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	if ( !defined($monitor->{MMapAddr}) )
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:        my $mmap_file = $Config{ZM_PATH_MAP}."/zm.mmap.".$monitor->{Id};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:		$monitor->{MMapHandle} = \*MMAP;
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:		$monitor->{MMapAddr} = $mmap_addr;
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:		$monitor->{MMap} = \$mmap;
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:    if ( $monitor->{MMap} )
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:        if ( ! munmap( ${$monitor->{MMap}} ) ) {
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	    delete $monitor->{MMap};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:    if ( $monitor->{MMapAddr} )
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	    delete $monitor->{MMapAddr};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:    if ( $monitor->{MMapHandle} )
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:        close( $monitor->{MMapHandle} );
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	    delete $monitor->{MMapHandle};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	my $mmap = $monitor->{MMap};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:        Error( sprintf( "Can't read from mapped memory for monitor '%d', gone away?", $monitor->{Id} ) );
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:	my $mmap = $monitor->{MMap};
./scripts/ZoneMinder/lib/ZoneMinder/Memory/Mapped.pm:        Error( sprintf( "Can't write mapped memory for monitor '%d', gone away?", $monitor->{Id} ) );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:				Error( "Shared data size conflict in shared_data for monitor ".$monitor->{Name}.", expected ".$mem_data->{shared_data}->{size}.", got ".$sd_size );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:				Debug( "Shared data size conflict in shared_data for monitor ".$monitor->{Name}.", expected ".$mem_data->{shared_data}->{size}.", got ".$sd_size );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:				Error( "Shared data size conflict in trigger_data for monitor ".$monitor->{Name}.", expected ".$mem_data->{triggger_data}->{size}.", got ".$td_size );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:				Debug( "Shared data size conflict in trigger_data for monitor ".$monitor->{Name}.", expected ".$mem_data->{triggger_data}->{size}.", got ".$td_size );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:            Error( "Unable to read '$field' from memory for monitor ".$monitor->{Id} );
./scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in:            Error( "Unable to write '$value' to '$field' in memory for monitor ".$monitor->{Id} );
./scripts/zmtrigger.pl.in:		#print( "$monitor->{Id}: S:$state, LE:$last_event\n" );
./scripts/zmtrigger.pl.in:		#print( "$monitor->{Id}: mS:$monitor->{LastState}, mLE:$monitor->{LastEvent}\n" );
./scripts/zmtrigger.pl.in:			if ( !defined($monitor->{LastEvent}) || ($last_event != $monitor->{LastEvent}) ) # A new event
./scripts/zmtrigger.pl.in:				push( @out_messages, $monitor->{Id}."|on|".time()."|".$last_event );
./scripts/zmtrigger.pl.in:		elsif ( ($state == STATE_IDLE && $monitor->{LastState} != STATE_IDLE) || ($state == STATE_TAPE && $monitor->{LastState} != STATE_TAPE) ) # Out of alarm state
./scripts/zmtrigger.pl.in:			push( @out_messages, $monitor->{Id}."|off|".time()."|".$last_event );
./scripts/zmtrigger.pl.in:		elsif ( defined($monitor->{LastEvent}) && ($last_event != $monitor->{LastEvent}) ) # We've missed a whole event
./scripts/zmtrigger.pl.in:			push( @out_messages, $monitor->{Id}."|on|".time()."|".$last_event );
./scripts/zmtrigger.pl.in:			push( @out_messages, $monitor->{Id}."|off|".time()."|".$last_event );
./scripts/zmtrigger.pl.in:		$monitor->{LastState} = $state;
./scripts/zmtrigger.pl.in:		$monitor->{LastEvent} = $last_event;
./scripts/zmtrigger.pl.in:		if ( defined($monitors{$monitor->{Id}}->{LastState}) )
./scripts/zmtrigger.pl.in:			$monitor->{LastState} = $monitors{$monitor->{Id}}->{LastState};
./scripts/zmtrigger.pl.in:			$monitor->{LastState} = zmGetMonitorState( $monitor );
./scripts/zmtrigger.pl.in:		if ( defined($monitors{$monitor->{Id}}->{LastEvent}) )
./scripts/zmtrigger.pl.in:			$monitor->{LastEvent} = $monitors{$monitor->{Id}}->{LastEvent};
./scripts/zmtrigger.pl.in:			$monitor->{LastEvent} = zmGetLastEvent( $monitor );
./scripts/zmtrigger.pl.in:		$new_monitors{$monitor->{Id}} = $monitor;
./scripts/zmtrigger.pl.in:		next if ( !$monitor->{Enabled} );
./scripts/zmx10.pl.in:				if ( defined( $monitor->{LastState} ) )
./scripts/zmx10.pl.in:					if ( ($state == STATE_ALARM || $state == STATE_ALERT) && ($monitor->{LastState} == STATE_IDLE || $monitor->{LastState} == STATE_TAPE) ) # Gone into alarm state
./scripts/zmx10.pl.in:						$task_list = $monitor->{"ON_list"};
./scripts/zmx10.pl.in:					elsif ( ($state == STATE_IDLE && $monitor->{LastState} != STATE_IDLE) || ($state == STATE_TAPE && $monitor->{LastState} != STATE_TAPE) ) # Come out of alarm state
./scripts/zmx10.pl.in:						$task_list = $monitor->{"OFF_list"};
./scripts/zmx10.pl.in:				$monitor->{LastState} = $state;
./scripts/zmx10.pl.in:	Debug( "Adding to device list, uc:$unit_code, ev:$event, mo:".$monitor->{Id}.", fu:$function, li:$limit\n" );
./scripts/zmx10.pl.in:	Debug( "Adding to monitor list, uc:$unit_code, ev:$event, mo:".$monitor->{Id}.", fu:$function, li:$limit\n" );
./scripts/zmx10.pl.in:	my $task = { type=>"monitor", device=>$device, id=>$monitor->{Id}, function=>$function };
./scripts/zmx10.pl.in:	my $task_list = $monitor->{$event."_list"};
./scripts/zmx10.pl.in:		$task_list = $monitor->{$event."_list"} = [];
./scripts/zmx10.pl.in:		$monitor_hash{$monitor->{Id}} = $monitor;
./scripts/zmx10.pl.in:		if ( $monitor->{Activation} )
./scripts/zmx10.pl.in:			Debug( "$monitor->{Name} has active string '$monitor->{Activation}'\n" );
./scripts/zmx10.pl.in:			foreach my $code_string ( split( /,/, $monitor->{Activation} ) )
./scripts/zmx10.pl.in:		if ( $monitor->{AlarmInput} )
./scripts/zmx10.pl.in:			Debug( "$monitor->{Name} has alarm input string '$monitor->{AlarmInput}'\n" );
./scripts/zmx10.pl.in:			foreach my $code_string ( split( /,/, $monitor->{AlarmInput} ) )
./scripts/zmx10.pl.in:		if ( $monitor->{AlarmOutput} )
./scripts/zmx10.pl.in:			Debug( "$monitor->{Name} has alarm output string '$monitor->{AlarmOutput}'\n" );
./scripts/zmx10.pl.in:			foreach my $code_string ( split( /,/, $monitor->{AlarmOutput} ) )
./scripts/zmfilter.pl.in:    $text =~ s/%MET%/$monitor->{EventCount}/g;
./scripts/zmfilter.pl.in:    $text =~ s/%MEH%/$monitor->{HourEventCount}/g;
./scripts/zmfilter.pl.in:    $text =~ s/%MED%/$monitor->{DayEventCount}/g;
./scripts/zmfilter.pl.in:    $text =~ s/%MEW%/$monitor->{WeekEventCount}/g;
./scripts/zmfilter.pl.in:    $text =~ s/%MEM%/$monitor->{MonthEventCount}/g;
./scripts/zmfilter.pl.in:    $text =~ s/%MEA%/$monitor->{ArchEventCount}/g;
./scripts/zmaudit.pl.in:        Debug( "Found database monitor '$monitor->{Id}'" );
./scripts/zmaudit.pl.in:        my $db_events = $db_monitors->{$monitor->{Id}} = {};
./scripts/zmaudit.pl.in:        my $res = $eventSelectSth->execute( $monitor->{Id} ) or Fatal( "Can't execute: ".$eventSelectSth->errstr() );
./scripts/zmpkg.pl.in:			if ( $monitor->{Id} =~ /^$definition->{Id}$/ )
./scripts/zmpkg.pl.in:				$monitor->{NewFunction} = $definition->{Function};
./scripts/zmpkg.pl.in:				$monitor->{NewEnabled} = $definition->{Enabled};
./scripts/zmpkg.pl.in:		#next if ( !$monitor->{NewFunction} );
./scripts/zmpkg.pl.in:		$monitor->{NewFunction} = 'None' if ( !$monitor->{NewFunction} );
./scripts/zmpkg.pl.in:		$monitor->{NewEnabled} = 0 if ( !$monitor->{NewEnabled} );
./scripts/zmpkg.pl.in:		if ( $monitor->{Function} ne $monitor->{NewFunction} || $monitor->{Enabled} ne $monitor->{NewEnabled} )
./scripts/zmpkg.pl.in:			my $res = $sth->execute( $monitor->{NewFunction}, $monitor->{NewEnabled}, $monitor->{Id} ) or Fatal( "Can't execute: ".$sth->errstr() );
./scripts/zmpkg.pl.in:			if ( $monitor->{Function} ne 'None' )
./scripts/zmpkg.pl.in:				if ( $monitor->{Type} eq 'Local' )
./scripts/zmpkg.pl.in:					runCommand( "zmdc.pl start zmc -d $monitor->{Device}" );
./scripts/zmpkg.pl.in:					runCommand( "zmdc.pl start zmc -m $monitor->{Id}" );
./scripts/zmpkg.pl.in:				if ( $monitor->{Function} ne 'Monitor' )
./scripts/zmpkg.pl.in:						runCommand( "zmdc.pl start zmf -m $monitor->{Id}" );
./scripts/zmpkg.pl.in:					runCommand( "zmdc.pl start zma -m $monitor->{Id}" );
./scripts/zmpkg.pl.in:					if ( $monitor->{Function} eq 'Modect' || $monitor->{Function} eq 'Mocord' )
./scripts/zmpkg.pl.in:						if ( $monitor->{Controllable} && $monitor->{TrackMotion} )
./scripts/zmpkg.pl.in:							runCommand( "zmdc.pl start zmtrack.pl -m $monitor->{Id}" );
./scripts/zmcontrol.pl.in:    my $protocol = $monitor->{Protocol};
./scripts/zmupdate.pl.in:            if ( -d $monitor->{Name} )
./scripts/zmupdate.pl.in:                rename( $monitor->{Name}, $monitor->{Id} ) or warn( "Can't rename existing monitor directory '$monitor->{Name}' to '$monitor->{Id}': $!" );
./scripts/zmupdate.pl.in:                symlink( $monitor->{Id}, $monitor->{Name} ) or warn( "Can't symlink monitor directory '$monitor->{Id}' to '$monitor->{Name}': $!" );
./scripts/zmupdate.pl.in:            my $res = $sth->execute( $monitor->{Width}, $monitor->{Height}, $monitor->{Id} ) or die( "Can't execute: ".$sth->errstr() );
./scripts/zmupdate.pl.in:                my $res = $sth->execute( $sequence++, $monitor->{Id} ) or die( "Can't execute: ".$sth->errstr() );
./scripts/zmupdate.pl.in:                if ( $db_monitor->{LabelFormat} =~ /\%\%s/ )
./scripts/zmupdate.pl.in:                    $db_monitor->{LabelFormat} =~ s/\%\%s/%N/;
./scripts/zmupdate.pl.in:                    $db_monitor->{LabelFormat} =~ s/\%\%s/%Q/;
./scripts/zmupdate.pl.in:                    my $res = $sth->execute( $db_monitor->{LabelFormat}, $db_monitor->{Id} ) or die( "Can't execute: ".$sth->errstr() );
./scripts/zmtrack.pl.in:if ( !$monitor->{Controllable} )
./scripts/zmtrack.pl.in:if ( !$monitor->{TrackMotion} )
./scripts/zmtrack.pl.in:if ( !$monitor->{CanMoveMap} )
./scripts/zmtrack.pl.in:	if ( $monitor->{CanMoveRel} )
./scripts/zmtrack.pl.in:	sleep( $monitor->{TrackDelay} );
./scripts/zmtrack.pl.in:    my $ctrlCommand = ZM_PATH_BIN."/zmcontrol.pl -i ".$monitor->{Id};
./scripts/zmtrack.pl.in:	$ctrlCommand .= " --command=".($monitor->{CanMoveMap}?"moveMap":"movePseudoMap")." --xcoord=$x --ycoord=$y";
./scripts/zmtrack.pl.in:    my $ctrlCommand = ZM_PATH_BIN."/zmcontrol.pl -i ".$monitor->{Id};
./scripts/zmtrack.pl.in:	if ( $monitor->{ReturnLocation} > 0 )
./scripts/zmtrack.pl.in:		$ctrlCommand .= " --command=presetGoto --preset=".$monitor->{ReturnLocation};
./scripts/zmtrack.pl.in:if ( ($monitor->{ReturnLocation} >= 0) )
./scripts/zmtrack.pl.in:		if ( ($monitor->{ReturnLocation} >= 0) && ($last_alarm > 0) && ((time()-$last_alarm) > $monitor->{ReturnDelay}) )
./scripts/zmtrack.pl.in:			Debug( "Returning to location ".$monitor->{ReturnLocation}."\n" );
./scripts/zmwatch.pl.in:		if ( $monitor->{Function} ne 'None' )
./scripts/zmwatch.pl.in:				my $max_image_delay = ($monitor->{MaxFPS}&&($monitor->{MaxFPS}>0)&&($monitor->{MaxFPS}<1))?(3/$monitor->{MaxFPS}):$Config{ZM_WATCH_MAX_DELAY};
./scripts/zmwatch.pl.in:				Debug( "Monitor $monitor->{Id} last captured $image_delay seconds ago, max is $max_image_delay\n" );
./scripts/zmwatch.pl.in:				    Info( "Restarting capture daemon for ".$monitor->{Name}.", time since last capture $image_delay seconds ($now-$image_time)\n" );
./scripts/zmwatch.pl.in:				#Info( "Restarting capture daemon for ".$monitor->{Name}.", shared data not valid\n" );
./scripts/zmwatch.pl.in:                if ( $monitor->{Type} eq 'Local' )
./scripts/zmwatch.pl.in:                    $command = "zmdc.pl restart zmc -d $monitor->{Device}";
./scripts/zmwatch.pl.in:                    $command = "zmdc.pl restart zmc -m $monitor->{Id}";
./scripts/zmwatch.pl.in:            elsif ( $monitor->{Function} ne 'Monitor' )
./scripts/zmwatch.pl.in:                    my $max_image_delay = ($monitor->{MaxFPS}&&($monitor->{MaxFPS}>0)&&($monitor->{MaxFPS}<1))?(3/$monitor->{MaxFPS}):$Config{ZM_WATCH_MAX_DELAY};
./scripts/zmwatch.pl.in:                    Debug( "Monitor $monitor->{Id} last analysed $image_delay seconds ago, max is $max_image_delay\n" );
./scripts/zmwatch.pl.in:                        Info( "Restarting analysis daemon for ".$monitor->{Name}.", time since last analysis $image_delay seconds ($now-$image_time)\n" );
./scripts/zmwatch.pl.in:                        my $command = "zmdc.pl restart zma -m ".$monitor->{Id};
./src/zm_monitor.cpp:            monitor->AddZones( n_zones, zones );
./src/zm_monitor.cpp:    status_data.id = monitor->Id();
./src/zm_monitor.cpp:    status_data.fps = monitor->GetFPS();
./src/zm_monitor.cpp:    status_data.state = monitor->shared_data->state;
./src/zm_monitor.cpp:    //status_data.enabled = monitor->shared_data->active;
./src/zm_monitor.cpp:    status_data.enabled = monitor->trigger_data->trigger_state!=Monitor::TRIGGER_OFF;
./src/zm_monitor.cpp:    status_data.forced = monitor->trigger_data->trigger_state==Monitor::TRIGGER_ON;
./src/zm_monitor.cpp:    updateFrameRate( monitor->GetFPS() );
./src/zm_monitor.cpp:        monitor->TimestampImage( send_image, timestamp );
./src/zm_monitor.cpp:        monitor->SingleImage( scale );
./src/zm_monitor.cpp:    updateFrameRate( monitor->GetFPS() );
./src/zm_monitor.cpp:    int last_read_index = monitor->image_buffer_count;
./src/zm_monitor.cpp:            snprintf( &(swap_path[strlen(swap_path)]), sizeof(swap_path)-strlen(swap_path), "/zmswap-m%d", monitor->Id() );
./src/zm_monitor.cpp:        if ( feof( stdout ) || ferror( stdout ) || !monitor->ShmValid() )
./src/zm_monitor.cpp:        if ( (unsigned int)last_read_index != monitor->shared_data->last_write_index )
./src/zm_monitor.cpp:            int index = monitor->shared_data->last_write_index%monitor->image_buffer_count;
./src/zm_monitor.cpp:            last_read_index = monitor->shared_data->last_write_index;
./src/zm_monitor.cpp:                    Monitor::Snapshot *snap = &monitor->image_buffer[index];
./src/zm_monitor.cpp:                if ( monitor->shared_data->valid )
./src/zm_monitor.cpp:                    if ( monitor->image_buffer[index].timestamp->tv_sec )
./src/zm_monitor.cpp:                        memcpy( &(temp_image_buffer[temp_index].timestamp), monitor->image_buffer[index].timestamp, sizeof(temp_image_buffer[0].timestamp) );
./src/zm_monitor.cpp:                        monitor->image_buffer[index].image->WriteJpeg( temp_image_buffer[temp_index].file_name, config.jpeg_file_quality );
./src/zm_monitor.cpp:        snprintf( swap_path, sizeof(swap_path), "%s/zmswap-m%d/zmswap-q%06d", config.path_swap, monitor->Id(), connkey );
./src/zmu.cpp:				printf( "Monitor %d(%s)\n", monitor->Id(), monitor->Name() );
./src/zmu.cpp:				Monitor::State state = monitor->GetState();
./src/zmu.cpp:				struct timeval timestamp = monitor->GetTimestamp( image_idx );
./src/zmu.cpp:					printf( "Last read index: %d\n", monitor->GetLastReadIndex() );
./src/zmu.cpp:					printf( "%d", monitor->GetLastReadIndex() );
./src/zmu.cpp:					printf( "Last write index: %d\n", monitor->GetLastWriteIndex() );
./src/zmu.cpp:					printf( "%d", monitor->GetLastWriteIndex() );
./src/zmu.cpp:					printf( "Last event id: %d\n", monitor->GetLastEvent() );
./src/zmu.cpp:					printf( "%d", monitor->GetLastEvent() );
./src/zmu.cpp:					printf( "Current capture rate: %.2f frames per second\n", monitor->GetFPS() );
./src/zmu.cpp:					printf( "%.2f", monitor->GetFPS() );
./src/zmu.cpp:						printf( "Dumping last image captured to Monitor%d.jpg", monitor->Id() );
./src/zmu.cpp:						printf( "Dumping buffer image %d to Monitor%d.jpg", image_idx, monitor->Id() );
./src/zmu.cpp:				monitor->GetImage( image_idx, scale>0?scale:100 );
./src/zmu.cpp:					printf( "Dumping zone image to Zones%d.jpg\n", monitor->Id() );
./src/zmu.cpp:				monitor->DumpZoneImage( zoneString );
./src/zmu.cpp:				monitor->ForceAlarmOn( config.forced_alarm_score, "Forced Web" );
./src/zmu.cpp:				monitor->ForceAlarmOff();
./src/zmu.cpp:				monitor->CancelForced();
./src/zmu.cpp:				monitor->actionReload();
./src/zmu.cpp:				monitor->actionEnable();
./src/zmu.cpp:				monitor->actionDisable();
./src/zmu.cpp:				monitor->actionSuspend();
./src/zmu.cpp:				monitor->actionResume();
./src/zmu.cpp:				monitor->DumpSettings( monString, verbose );
./src/zmu.cpp:						printf( "New brightness: %d\n", monitor->actionBrightness( brightness ) );
./src/zmu.cpp:						printf( "Current brightness: %d\n", monitor->actionBrightness() );
./src/zmu.cpp:						printf( "%d", monitor->actionBrightness( brightness ) );
./src/zmu.cpp:						printf( "%d", monitor->actionBrightness() );
./src/zmu.cpp:						printf( "New brightness: %d\n", monitor->actionContrast( contrast ) );
./src/zmu.cpp:						printf( "Current contrast: %d\n", monitor->actionContrast() );
./src/zmu.cpp:						printf( "%d", monitor->actionContrast( contrast ) );
./src/zmu.cpp:						printf( "%d", monitor->actionContrast() );
./src/zmu.cpp:						printf( "New hue: %d\n", monitor->actionHue( hue ) );
./src/zmu.cpp:						printf( "Current hue: %d\n", monitor->actionHue() );
./src/zmu.cpp:						printf( "%d", monitor->actionHue( hue ) );
./src/zmu.cpp:						printf( "%d", monitor->actionHue() );
./src/zmu.cpp:						printf( "New colour: %d\n", monitor->actionColour( colour ) );
./src/zmu.cpp:						printf( "Current colour: %d\n", monitor->actionColour() );
./src/zmu.cpp:						printf( "%d", monitor->actionColour( colour ) );
./src/zmu.cpp:						printf( "%d", monitor->actionColour() );
./src/zmu.cpp:							struct timeval tv = monitor->GetTimestamp();
./src/zmu.cpp:								monitor->Id(),
./src/zmu.cpp:								monitor->GetState(),
./src/zmu.cpp:								monitor->GetTriggerState(),
./src/zmu.cpp:								monitor->GetLastReadIndex(),
./src/zmu.cpp:								monitor->GetLastWriteIndex(),
./src/zmu.cpp:								monitor->GetLastEvent(),
./src/zmu.cpp:								monitor->GetFPS()
./src/zm_zone.cpp:	pg_image = new Image( monitor->Width(), monitor->Height(), 1, ZM_SUBPIX_ORDER_NONE);
./src/zm_zone.cpp:	ranges = new Range[monitor->Height()];
./src/zm_zone.cpp:	for ( unsigned int y = 0; y < monitor->Height(); y++)
./src/zm_zone.cpp:		for ( unsigned int x = 0; x < monitor->Width(); x++, ppoly++ )
./src/zm_zone.cpp:			snprintf( diag_path, sizeof(diag_path), "%s/%s/diag-%d-poly.jpg", config.dir_events, monitor->Name(), id);
./src/zm_zone.cpp:	snprintf( sql, sizeof(sql), "insert into Stats set MonitorId=%d, ZoneId=%d, EventId=%d, FrameId=%d, PixelDiff=%d, AlarmPixels=%d, FilterPixels=%d, BlobPixels=%d, Blobs=%d, MinBlobSize=%d, MaxBlobSize=%d, MinX=%d, MinY=%d, MaxX=%d, MaxY=%d, Score=%d", monitor->Id(), id, event->Id(), event->Frames()+1, pixel_diff, alarm_pixels, alarm_filter_pixels, alarm_blob_pixels, alarm_blobs, min_blob_size, max_blob_size, alarm_box.LoX(), alarm_box.LoY(), alarm_box.HiX(), alarm_box.HiY(), score );
./src/zm_zone.cpp:			snprintf( diag_path, sizeof(diag_path), "%s/%s/diag-%d-%d.jpg", config.dir_events, monitor->Name(), id, 1 );
./src/zm_zone.cpp:				snprintf( diag_path, sizeof(diag_path), "%s/%d/diag-%d-%d.jpg", config.dir_events, monitor->Id(), id, 2 );
./src/zm_zone.cpp:					snprintf( diag_path, sizeof(diag_path), "%s/%d/diag-%d-%d.jpg", config.dir_events, monitor->Id(), id, 3 );
./src/zm_zone.cpp:					snprintf( diag_path, sizeof(diag_path), "%s/%d/diag-%d-%d.jpg", config.dir_events, monitor->Id(), id, 4 );
./src/zm_zone.cpp:		//if ( monitor->followMotion() )
./src/zm_zone.cpp:			if( monitor->Colours() == ZM_COLOUR_GRAY8 ) {
./src/zm_zone.cpp:				image = diff_image->HighlightEdges( alarm_rgb, monitor->Colours(), monitor->SubpixelOrder(), &polygon.Extent() );
./src/zm_zone.cpp:	snprintf( sql, sizeof(sql), "select Id,Name,Type+0,Units,Coords,AlarmRGB,CheckMethod+0,MinPixelThreshold,MaxPixelThreshold,MinAlarmPixels,MaxAlarmPixels,FilterX,FilterY,MinFilterPixels,MaxFilterPixels,MinBlobPixels,MaxBlobPixels,MinBlobs,MaxBlobs,OverloadFrames from Zones where MonitorId = %d order by Type, Id", monitor->Id() );
./src/zm_zone.cpp:	Debug( 1, "Got %d zones for monitor %s", n_zones, monitor->Name() );
./src/zm_zone.cpp:			Error( "Unable to parse polygon string '%s' for zone %d/%s for monitor %s, ignoring", Coords, Id, Name, monitor->Name() );
./src/zm_zone.cpp:		if ( polygon.LoX() < 0 || polygon.HiX() >= (int)monitor->Width() 
./src/zm_zone.cpp:           || polygon.LoY() < 0 || polygon.HiY() >= (int)monitor->Height() ) {
./src/zm_zone.cpp:			Error( "Zone %d/%s for monitor %s extends outside of image dimensions, (%d,%d), (%d,%d), ignoring", Id, Name, monitor->Name(), polygon.LoX(), polygon.LoY(), polygon.HiX(), polygon.HiY() );
./src/zmf.cpp:	snprintf( capt_path, sizeof(capt_path), "%s/%d/%%s/%%0%dd-capture.jpg", config.dir_events, monitor->Id(), config.event_image_digits );
./src/zmf.cpp:	snprintf( anal_path, sizeof(anal_path), "%s/%d/%%s/%%0%dd-analyse.jpg", config.dir_events, monitor->Id(), config.event_image_digits );
./src/zmf.cpp:	int sd = OpenSocket( monitor->Id() );
./src/zmf.cpp:			ReopenSocket( sd, monitor->Id() );
./src/zmf.cpp:			ReopenSocket( sd, monitor->Id() );
./src/zmf.cpp:			ReopenSocket( sd, monitor->Id() );
./src/zma.cpp:		Info( "In mode %d/%d, warming up", monitor->GetFunction(), monitor->Enabled() );
./src/zma.cpp:			Event::OpenFrameSocket( monitor->Id() );
./src/zma.cpp:			if ( !monitor->Analyse() )
./src/zma.cpp:				usleep( monitor->Active()?ZM_SAMPLE_RATE:ZM_SUSPENDED_RATE );
./src/zma.cpp:				monitor->Reload();
./src/zm_stream.cpp:    Image image( monitor->Width(), monitor->Height(), monitor->Colours(), monitor->SubpixelOrder() );
./src/zm_event.cpp:    snprintf( sql, sizeof(sql), "insert into Events ( MonitorId, Name, StartTime, Width, Height, Cause, Notes ) values ( %d, 'New Event', from_unixtime( %ld ), %d, %d, '%s', '%s' )", monitor->Id(), start_time.tv_sec, monitor->Width(), monitor->Height(), cause.c_str(), notes.c_str() );
./src/zm_event.cpp:        path_ptr += snprintf( path_ptr, sizeof(path), "%s/%d", config.dir_events, monitor->Id() );
./src/zm_event.cpp:        snprintf( path, sizeof(path), "%s/%d/%d", config.dir_events, monitor->Id(), id );
./src/zm_event.cpp:    snprintf( sql, sizeof(sql), "update Events set Name='%s%d', EndTime = from_unixtime( %ld ), Length = %s%ld.%02ld, Frames = %d, AlarmFrames = %d, TotScore = %d, AvgScore = %d, MaxScore = %d where Id = %d", monitor->EventPrefix(), id, end_time.tv_sec, delta_time.positive?"":"-", delta_time.sec, delta_time.fsec, frames, alarm_frames, tot_score, (int)(alarm_frames?(tot_score/alarm_frames):0), max_score, id );
./src/zm_event.cpp:    if ( !ValidateFrameSocket( monitor->Id() ) )
./src/zm_event.cpp:        monitor->TimestampImage( &ts_image, &timestamp );
./src/zm_event.cpp:        snprintf( diag_glob, sizeof(diag_glob), "%s/%d/diag-*.jpg", config.dir_events, monitor->Id() );
./db/zm_create.sql.in:INSERT INTO MonitorPresets VALUES (NULL,'Remote ZoneMinder','Remote',NULL,NULL,NULL,'http','simple','<ip-address>',80,'/cgi-bin/nph-zms?mode=jpeg&monitor=<monitor-id>&scale=100&maxfps=5&buffer=0',NULL,NULL,NULL,3,NULL,0,NULL,NULL,NULL,100,100);
./db/zm_update-1.24.2.sql:INSERT INTO `MonitorPresets` VALUES ('','Remote ZoneMinder','Remote',NULL,NULL,NULL,'http','simple','<ip-address>',80,'/cgi-bin/nph-zms?mode=jpeg&monitor=<monitor-id>&scale=100&maxfps=5&buffer=0',NULL,NULL,NULL,3,NULL,0,NULL,NULL,NULL,100,100);
Binary file ./.git/objects/pack/pack-bd32ad3df5c1fff7110f575aae37c6a3ce09a23e.pack matches
